{"version":3,"file":"bluetooth-DyS4SozQ.js","sources":["../../src/services/bluetooth/constants.ts","../../src/services/bluetooth/WebBluetoothAdapter.ts"],"sourcesContent":["// Verified Service UUIDs from firmware analysis\nexport const VERIFIED_SERVICE_UUIDS = {\n  GENERIC_ACCESS_PROFILE: {\n    uuid: 0x1800,\n    name: 'Generic Access Profile',\n    verified: {\n      littleEndian: {\n        occurrences: 6076,\n        firstOffset: 0x0001c9a7\n      },\n      bigEndian: {\n        occurrences: 3196,\n        firstOffset: 0x00008be0\n      }\n    }\n  },\n  GENERIC_ATTRIBUTE_PROFILE: {\n    uuid: 0x1801,\n    name: 'Generic Attribute Profile',\n    verified: {\n      littleEndian: {\n        occurrences: 2416,\n        firstOffset: 0x00023410\n      },\n      bigEndian: {\n        occurrences: 3004,\n        firstOffset: 0x000088c0\n      }\n    }\n  },\n  DEVICE_INFORMATION_SERVICE: {\n    uuid: 0x180A,\n    name: 'Device Information Service',\n    verified: {\n      littleEndian: {\n        occurrences: 2263,\n        firstOffset: 0x00004e0c\n      },\n      bigEndian: {\n        occurrences: 2287,\n        firstOffset: 0x0002ffe4\n      }\n    }\n  },\n  BATTERY_SERVICE: {\n    uuid: 0x180F,\n    name: 'Battery Service',\n    verified: {\n      littleEndian: {\n        occurrences: 2189,\n        firstOffset: 0x0000222b\n      },\n      bigEndian: {\n        occurrences: 2182,\n        firstOffset: 0x00005483\n      }\n    }\n  },\n  HUMAN_INTERFACE_DEVICE: {\n    uuid: 0x1812,\n    name: 'Human Interface Device',\n    verified: {\n      littleEndian: {\n        occurrences: 2586,\n        firstOffset: 0x0003626b\n      },\n      bigEndian: {\n        occurrences: 2568,\n        firstOffset: 0x00000fb4\n      }\n    }\n  },\n  AUDIO_SOURCE: {\n    uuid: 0x110A,\n    name: 'Audio Source',\n    verified: {\n      littleEndian: {\n        occurrences: 2069,\n        firstOffset: 0x000021f8\n      },\n      bigEndian: {\n        occurrences: 2472,\n        firstOffset: 0x0003343a\n      }\n    }\n  },\n  AUDIO_SINK: {\n    uuid: 0x110B,\n    name: 'Audio Sink',\n    verified: {\n      littleEndian: {\n        occurrences: 2332,\n        firstOffset: 0x0002301c\n      },\n      bigEndian: {\n        occurrences: 2058,\n        firstOffset: 0x000053fc\n      }\n    }\n  },\n  OBJECT_PUSH_PROFILE: {\n    uuid: 0x1105,\n    name: 'Object Push Profile',\n    verified: {\n      littleEndian: {\n        occurrences: 2763,\n        firstOffset: 0x0000a3a6\n      },\n      bigEndian: {\n        occurrences: 2401,\n        firstOffset: 0x00005f7d\n      }\n    }\n  },\n  FILE_TRANSFER_PROFILE: {\n    uuid: 0x1106,\n    name: 'File Transfer Profile',\n    verified: {\n      littleEndian: {\n        occurrences: 2539,\n        firstOffset: 0x00018dbb\n      },\n      bigEndian: {\n        occurrences: 2562,\n        firstOffset: 0x000064f3\n      }\n    }\n  },\n  NORDIC_DFU_SERVICE: {\n    uuid: 0xFE59,\n    name: 'Nordic DFU Service',\n    verified: {\n      littleEndian: {\n        occurrences: 2566,\n        firstOffset: 0x0000dae0\n      },\n      bigEndian: {\n        occurrences: 2134,\n        firstOffset: 0x00007a8c\n      }\n    }\n  }\n} as const;\n\n// Verified HCI Commands from firmware analysis\nexport const VERIFIED_HCI_COMMANDS = {\n  HCI_RESET: {\n    pattern: [0x01, 0x03, 0x0C] as const,\n    name: 'HCI Reset',\n    verified: {\n      occurrences: 5,\n      firstOffset: 0x0087B99B,\n      context: '3073E5AC01650B2F53D90CD985AA8AFA01030CB78FAAA1286ADD0D13D04D729F'\n    }\n  },\n  HCI_SET_EVENT_MASK: {\n    pattern: [0x01, 0x05, 0x0C] as const,\n    name: 'HCI Set Event Mask',\n    verified: {\n      occurrences: 8,\n      firstOffset: 0x000A2E6F,\n      context: 'D976409D81CB529D83E0548CF54DB4A701050CF4F57C031D8776F2A41E24BE49'\n    }\n  },\n  HCI_INQUIRY: {\n    pattern: [0x01, 0x01, 0x0C] as const,\n    name: 'HCI Inquiry',\n    verified: {\n      occurrences: 6,\n      firstOffset: 0x00099830,\n      context: '35DE008A2A7144CE5C1E4C26EBCE5B0001010CB8FFED23B1A8CB2418FDD9FA95'\n    }\n  },\n  HCI_READ_BD_ADDR: {\n    pattern: [0x01, 0x09, 0x0C] as const,\n    name: 'HCI Read BD_ADDR',\n    verified: {\n      occurrences: 7,\n      firstOffset: 0x0076E699,\n      context: '63BA7723CB0A988B894316A8D3C010C801090CEF0461E78B66B3F93754B55783'\n    }\n  },\n  HCI_CHANGE_LOCAL_NAME: {\n    pattern: [0x01, 0x13, 0x0C] as const,\n    name: 'HCI Change Local Name',\n    verified: {\n      occurrences: 16,\n      firstOffset: 0x00417506,\n      context: 'C5840A85982A1E2E333F41CF6D79DF3901130CD79E1DD4E535C7E1837492DCFD'\n    }\n  },\n  HCI_WRITE_SCAN_ENABLE: {\n    pattern: [0x01, 0x1A, 0x0C] as const,\n    name: 'HCI Write Scan Enable',\n    verified: {\n      occurrences: 11,\n      firstOffset: 0x009335F5,\n      context: 'C7C99D8136B8DA3CA1F6639F8F0F32AE011A0C5A3FF1E680124A19427DCFB9F2'\n    }\n  },\n  HCI_WRITE_CLASS_OF_DEVICE: {\n    pattern: [0x01, 0x23, 0x0C] as const,\n    name: 'HCI Write Class of Device',\n    verified: {\n      occurrences: 10,\n      firstOffset: 0x005CAA28,\n      context: 'A780235EDF45A1442F161E94A672500501230C4A61A15E39A9B078BFCC101F18'\n    }\n  },\n  HCI_WRITE_SIMPLE_PAIRING_MODE: {\n    pattern: [0x01, 0x56, 0x0C] as const,\n    name: 'HCI Write Simple Pairing Mode',\n    verified: {\n      occurrences: 10,\n      firstOffset: 0x0050BFD7,\n      context: '8FD844B59D0C12D0880907612CCC015A01560CE422B116F01C58E7BAE1D74C66'\n    }\n  },\n  HCI_WRITE_LE_HOST_SUPPORT: {\n    pattern: [0x01, 0x6D, 0x0C] as const,\n    name: 'HCI Write LE Host Support',\n    verified: {\n      occurrences: 7,\n      firstOffset: 0x004F6294,\n      context: 'AC2A1D23F06EF840683124BB54E5D3C8016D0C4B5DB63D4DB264B14CE67791EA'\n    }\n  }\n} as const;\n\n// Web Bluetooth API compatible service UUIDs\nexport const WEB_BLUETOOTH_SERVICES = {\n  GENERIC_ACCESS: '00001800-0000-1000-8000-00805f9b34fb',\n  GENERIC_ATTRIBUTE: '00001801-0000-1000-8000-00805f9b34fb',\n  DEVICE_INFORMATION: '0000180a-0000-1000-8000-00805f9b34fb',\n  BATTERY_SERVICE: '0000180f-0000-1000-8000-00805f9b34fb',\n  HID_SERVICE: '00001812-0000-1000-8000-00805f9b34fb',\n  NORDIC_DFU: '0000fe59-0000-1000-8000-00805f9b34fb'\n} as const;\n\n// Standard GATT characteristics\nexport const GATT_CHARACTERISTICS = {\n  DEVICE_NAME: '00002a00-0000-1000-8000-00805f9b34fb',\n  APPEARANCE: '00002a01-0000-1000-8000-00805f9b34fb',\n  PERIPHERAL_CONNECTION_PARAMETERS: '00002a04-0000-1000-8000-00805f9b34fb',\n  SERVICE_CHANGED: '00002a05-0000-1000-8000-00805f9b34fb',\n  MANUFACTURER_NAME_STRING: '00002a29-0000-1000-8000-00805f9b34fb',\n  MODEL_NUMBER_STRING: '00002a24-0000-1000-8000-00805f9b34fb',\n  SERIAL_NUMBER_STRING: '00002a25-0000-1000-8000-00805f9b34fb',\n  HARDWARE_REVISION_STRING: '00002a27-0000-1000-8000-00805f9b34fb',\n  FIRMWARE_REVISION_STRING: '00002a26-0000-1000-8000-00805f9b34fb',\n  SOFTWARE_REVISION_STRING: '00002a28-0000-1000-8000-00805f9b34fb',\n  BATTERY_LEVEL: '00002a19-0000-1000-8000-00805f9b34fb'\n} as const;\n\n// Verified advertising data patterns\nexport const VERIFIED_ADVERTISING_PATTERNS = {\n  FLAGS: {\n    pattern: [0x02, 0x01] as const,\n    name: 'Flags',\n    verified: {\n      occurrences: 1984,\n      firstOffset: 0x00004950\n    }\n  },\n  INCOMPLETE_16BIT_SERVICE_UUIDS: {\n    pattern: [0x03, 0x02] as const,\n    name: 'Incomplete List 16-bit Service UUIDs',\n    verified: {\n      occurrences: 1756,\n      firstOffset: 0x0003B02A\n    }\n  },\n  COMPLETE_16BIT_SERVICE_UUIDS: {\n    pattern: [0x03, 0x03] as const,\n    name: 'Complete List 16-bit Service UUIDs',\n    verified: {\n      occurrences: 2009,\n      firstOffset: 0x0000517A\n    }\n  },\n  COMPLETE_128BIT_SERVICE_UUIDS: {\n    pattern: [0x17, 0x06] as const,\n    name: 'Complete List 128-bit Service UUIDs',\n    verified: {\n      occurrences: 2115,\n      firstOffset: 0x000100DB\n    }\n  },\n  COMPLETE_LOCAL_NAME: {\n    pattern: [0x09, 0x09] as const,\n    name: 'Complete Local Name',\n    verified: {\n      occurrences: 2232,\n      firstOffset: 0x0001E45B\n    }\n  }\n} as const;\n\n// Protocol signatures\nexport const VERIFIED_BLUETOOTH_SIGNATURES = {\n  BLE: {\n    occurrences: 5,\n    firstOffset: 0x01c1e183,\n    context: 'fd9e98c75214606c56c39017bd25ceb24151a9fd424c451114b56bee9cca41da2178b512d0a134f66623b7'\n  },\n  GAP: {\n    occurrences: 11,\n    firstOffset: 0x006039db,\n    context: 'd33bd5f8b594249fc75fa3827cd0aa9640e117f54741503ff695befee427292565a5cb642d747dd1cd6a50'\n  },\n  HCI: {\n    occurrences: 9,\n    firstOffset: 0x014597d9,\n    context: '218ee93ddd58aedbe488c084cd24d368824f109d48434994871f4d46c64e83f25d1ee0e15fecad9050c0b1'\n  },\n  SDP: {\n    occurrences: 11,\n    firstOffset: 0x00758d61,\n    context: 'e3825a975bbde3285f45cdb6d17ba473e39c370753445058034a16ed7deaeb08bff6a3900a112a86aac0bb'\n  },\n  ATT: {\n    occurrences: 5,\n    firstOffset: 0x029f2ac1,\n    context: 'dcbc3eefd3ca41fd68b27b155d1855464ee54985415454f28d47ba467a7794be253fe87011e13b96c7497d'\n  }\n} as const;","import { WEB_BLUETOOTH_SERVICES } from './constants';\nimport type { \n  BluetoothOperationResult, \n  DeviceConnectionState, \n  ServiceDiscoveryResult \n} from '@/types';\n\nexport class WebBluetoothAdapter {\n  private device: BluetoothDevice | null = null;\n  private server: BluetoothRemoteGATTServer | null = null;\n  private connectionState: DeviceConnectionState = {\n    connected: false,\n    connecting: false,\n    device: null,\n    services: [],\n    characteristics: new Map(),\n    error: null\n  };\n\n  private readonly retryAttempts = 3;\n  private readonly retryDelay = 1000;\n\n  constructor() {\n    this.checkBrowserSupport();\n  }\n\n  /**\n   * Check if Web Bluetooth is supported\n   */\n  private checkBrowserSupport(): void {\n    if (!navigator.bluetooth) {\n      throw new Error('Web Bluetooth is not supported in this browser. Please use Chrome/Edge with HTTPS.');\n    }\n  }\n\n  /**\n   * Request device with Blackmagic camera filters\n   */\n  async requestDevice(): Promise<BluetoothOperationResult<BluetoothDevice>> {\n    try {\n      this.connectionState.connecting = true;\n      this.connectionState.error = null;\n\n      const device = await navigator.bluetooth.requestDevice({\n        acceptAllDevices: true,\n        optionalServices: [\n          WEB_BLUETOOTH_SERVICES.GENERIC_ACCESS,\n          WEB_BLUETOOTH_SERVICES.GENERIC_ATTRIBUTE,\n          WEB_BLUETOOTH_SERVICES.DEVICE_INFORMATION,\n          WEB_BLUETOOTH_SERVICES.BATTERY_SERVICE,\n          WEB_BLUETOOTH_SERVICES.HID_SERVICE,\n          WEB_BLUETOOTH_SERVICES.NORDIC_DFU,\n          // Add more common services that devices might have\n          '0000180f-0000-1000-8000-00805f9b34fb', // Battery Service\n          '0000fe59-0000-1000-8000-00805f9b34fb', // Nordic DFU\n          '00001105-0000-1000-8000-00805f9b34fb', // OBEX Object Push\n          '0000110a-0000-1000-8000-00805f9b34fb', // Audio Source\n          '0000110b-0000-1000-8000-00805f9b34fb', // Audio Sink\n          '00001200-0000-1000-8000-00805f9b34fb', // PnP Information\n          '0000fffe-0000-1000-8000-00805f9b34fb', // File Transfer Profile\n          // Allow any other services that might be present\n          '00000000-0000-1000-8000-00805f9b34fb' // Placeholder for unknown services\n        ]\n      });\n\n      this.device = device;\n      this.connectionState.device = device;\n      this.setupDeviceEventListeners();\n\n      return { success: true, data: device };\n    } catch (error) {\n      const errorMessage = error instanceof Error ? error.message : 'Unknown error occurred';\n      this.connectionState.error = errorMessage;\n      return { success: false, error: errorMessage };\n    } finally {\n      this.connectionState.connecting = false;\n    }\n  }\n\n  /**\n   * Connect to the selected device\n   */\n  async connect(): Promise<BluetoothOperationResult<void>> {\n    if (!this.device) {\n      return { success: false, error: 'No device selected' };\n    }\n\n    return this.executeWithRetry(async () => {\n      this.connectionState.connecting = true;\n      this.connectionState.error = null;\n\n      if (!this.device!.gatt) {\n        throw new Error('Device GATT server not available');\n      }\n\n      this.server = await this.device!.gatt.connect();\n      this.connectionState.connected = true;\n      this.connectionState.connecting = false;\n\n      console.log('Connected to device:', this.device!.name);\n      return { success: true };\n    });\n  }\n\n  /**\n   * Disconnect from the device\n   */\n  async disconnect(): Promise<void> {\n    if (this.server && this.server.connected) {\n      this.server.disconnect();\n    }\n    \n    this.connectionState.connected = false;\n    this.connectionState.connecting = false;\n    this.connectionState.services = [];\n    this.connectionState.characteristics.clear();\n    \n    console.log('Disconnected from device');\n  }\n\n  /**\n   * Discover services on the connected device\n   */\n  async discoverServices(): Promise<BluetoothOperationResult<ServiceDiscoveryResult[]>> {\n    if (!this.server || !this.server.connected) {\n      return { success: false, error: 'Not connected to device' };\n    }\n\n    try {\n      const services = await this.server.getPrimaryServices();\n      const discoveredServices: ServiceDiscoveryResult[] = [];\n      this.connectionState.services = services;\n\n      for (const service of services) {\n        const serviceName = this.getServiceName(service.uuid);\n        const characteristics = await this.discoverCharacteristics(service);\n        \n        discoveredServices.push({\n          serviceUuid: service.uuid,\n          serviceName,\n          characteristics\n        });\n      }\n\n      return { success: true, data: discoveredServices };\n    } catch (error) {\n      const errorMessage = error instanceof Error ? error.message : 'Service discovery failed';\n      return { success: false, error: errorMessage };\n    }\n  }\n\n  /**\n   * Discover characteristics for a service\n   */\n  private async discoverCharacteristics(service: BluetoothRemoteGATTService) {\n    try {\n      const characteristics = await service.getCharacteristics();\n      const result = [];\n\n      for (const char of characteristics) {\n        this.connectionState.characteristics.set(char.uuid, char);\n        \n        let value = null;\n        if (char.properties.read) {\n          try {\n            value = await char.readValue();\n          } catch (error) {\n            console.warn(`Failed to read characteristic ${char.uuid}:`, error);\n          }\n        }\n\n        result.push({\n          uuid: char.uuid,\n          properties: Object.keys(char.properties).filter(prop => \n            char.properties[prop as keyof BluetoothCharacteristicProperties]\n          ),\n          value\n        });\n      }\n\n      return result;\n    } catch (error) {\n      console.error('Failed to discover characteristics:', error);\n      return [];\n    }\n  }\n\n  /**\n   * Read characteristic value\n   */\n  async readCharacteristic(characteristicUuid: string): Promise<BluetoothOperationResult<DataView>> {\n    const characteristic = this.connectionState.characteristics.get(characteristicUuid);\n    \n    if (!characteristic) {\n      return { success: false, error: 'Characteristic not found' };\n    }\n\n    if (!characteristic.properties.read) {\n      return { success: false, error: 'Characteristic is not readable' };\n    }\n\n    try {\n      const value = await characteristic.readValue();\n      return { success: true, data: value };\n    } catch (error) {\n      const errorMessage = error instanceof Error ? error.message : 'Read failed';\n      return { success: false, error: errorMessage };\n    }\n  }\n\n  /**\n   * Write characteristic value\n   */\n  async writeCharacteristic(\n    characteristicUuid: string, \n    value: ArrayBuffer\n  ): Promise<BluetoothOperationResult<void>> {\n    const characteristic = this.connectionState.characteristics.get(characteristicUuid);\n    \n    if (!characteristic) {\n      return { success: false, error: 'Characteristic not found' };\n    }\n\n    if (!characteristic.properties.write && !characteristic.properties.writeWithoutResponse) {\n      return { success: false, error: 'Characteristic is not writable' };\n    }\n\n    try {\n      if (characteristic.properties.writeWithoutResponse) {\n        await characteristic.writeValueWithoutResponse(value);\n      } else {\n        await characteristic.writeValueWithResponse(value);\n      }\n      return { success: true };\n    } catch (error) {\n      const errorMessage = error instanceof Error ? error.message : 'Write failed';\n      return { success: false, error: errorMessage };\n    }\n  }\n\n  /**\n   * Subscribe to characteristic notifications\n   */\n  async subscribeToNotifications(\n    characteristicUuid: string,\n    callback: (value: DataView) => void\n  ): Promise<BluetoothOperationResult<void>> {\n    const characteristic = this.connectionState.characteristics.get(characteristicUuid);\n    \n    if (!characteristic) {\n      return { success: false, error: 'Characteristic not found' };\n    }\n\n    if (!characteristic.properties.notify && !characteristic.properties.indicate) {\n      return { success: false, error: 'Characteristic does not support notifications' };\n    }\n\n    try {\n      await characteristic.startNotifications();\n      characteristic.addEventListener('characteristicvaluechanged', (event) => {\n        const target = event.target as BluetoothRemoteGATTCharacteristic;\n        if (target.value) {\n          callback(target.value);\n        }\n      });\n      return { success: true };\n    } catch (error) {\n      const errorMessage = error instanceof Error ? error.message : 'Subscription failed';\n      return { success: false, error: errorMessage };\n    }\n  }\n\n  /**\n   * Get current connection state\n   */\n  getConnectionState(): DeviceConnectionState {\n    return { ...this.connectionState };\n  }\n\n  /**\n   * Setup device event listeners\n   */\n  private setupDeviceEventListeners(): void {\n    if (!this.device) return;\n\n    this.device.addEventListener('gattserverdisconnected', () => {\n      console.log('Device disconnected');\n      this.connectionState.connected = false;\n      this.connectionState.connecting = false;\n    });\n  }\n\n  /**\n   * Execute operation with retry logic\n   */\n  private async executeWithRetry<T>(\n    operation: () => Promise<BluetoothOperationResult<T>>\n  ): Promise<BluetoothOperationResult<T>> {\n    let lastError: string = 'Unknown error';\n\n    for (let attempt = 1; attempt <= this.retryAttempts; attempt++) {\n      try {\n        return await operation();\n      } catch (error) {\n        lastError = error instanceof Error ? error.message : 'Operation failed';\n        console.warn(`Attempt ${attempt} failed:`, lastError);\n        \n        if (attempt < this.retryAttempts) {\n          await this.delay(this.retryDelay * attempt);\n        }\n      }\n    }\n\n    this.connectionState.error = lastError;\n    this.connectionState.connecting = false;\n    return { success: false, error: lastError };\n  }\n\n  /**\n   * Get service name from UUID\n   */\n  private getServiceName(uuid: string): string {\n    const serviceMap: Record<string, string> = {\n      [WEB_BLUETOOTH_SERVICES.GENERIC_ACCESS]: 'Generic Access Profile',\n      [WEB_BLUETOOTH_SERVICES.GENERIC_ATTRIBUTE]: 'Generic Attribute Profile',\n      [WEB_BLUETOOTH_SERVICES.DEVICE_INFORMATION]: 'Device Information Service',\n      [WEB_BLUETOOTH_SERVICES.BATTERY_SERVICE]: 'Battery Service',\n      [WEB_BLUETOOTH_SERVICES.HID_SERVICE]: 'Human Interface Device',\n      [WEB_BLUETOOTH_SERVICES.NORDIC_DFU]: 'Nordic DFU Service'\n    };\n\n    return serviceMap[uuid] || `Unknown Service (${uuid})`;\n  }\n\n  /**\n   * Utility delay function\n   */\n  private delay(ms: number): Promise<void> {\n    return new Promise(resolve => setTimeout(resolve, ms));\n  }\n\n  /**\n   * Check if device is supported Blackmagic camera\n   */\n  isBlackmagicDevice(): boolean {\n    if (!this.device || !this.device.name) return false;\n    \n    const deviceName = this.device.name.toLowerCase();\n    return deviceName.includes('blackmagic') || \n           deviceName.includes('bmd') || \n           deviceName.includes('ursa') || \n           deviceName.includes('pocket');\n  }\n\n  /**\n   * Get device information\n   */\n  getDeviceInfo() {\n    return {\n      id: this.device?.id || 'Unknown',\n      name: this.device?.name || 'Unknown Device',\n      connected: this.connectionState.connected,\n      services: this.connectionState.services.length,\n      characteristics: this.connectionState.characteristics.size\n    };\n  }\n}"],"names":["VERIFIED_SERVICE_UUIDS","VERIFIED_HCI_COMMANDS","WEB_BLUETOOTH_SERVICES","VERIFIED_BLUETOOTH_SIGNATURES","WebBluetoothAdapter","__publicField","device","error","errorMessage","services","discoveredServices","service","serviceName","characteristics","result","char","value","prop","characteristicUuid","characteristic","callback","event","target","operation","lastError","attempt","uuid","ms","resolve","deviceName","_a","_b"],"mappings":"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"}